<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pinpad.Sdk</name>
    </assembly>
    <members>
        <member name="P:Pinpad.Sdk.EmvTable.IPinpadFacade.Communication">
            <summary>
            Gets the default Communication adapter.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.IPinpadFacade.Keyboard">
            <summary>
            Gets the default Keyboard adapter
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.IPinpadFacade.Display">
            <summary>
            Gets the default Display adapter
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.IPinpadFacade.Printer">
            <summary>
            Gets the default Printer adapter
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.IPinpadFacade.Storage">
            <summary>
            Gets the default Storage adapter
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.IPinpadFacade.Table">
            <summary>
            Gets the default Table adapter
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.IPinpadFacade.Infos">
            <summary>
            Gets the default Infos adapter
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.IPinpadFacade.Encryption">
            <summary>
            Controller for Stone Secure Command.
            </summary>
        </member>
        <member name="T:Pinpad.Sdk.EmvTable.Mapper.AidMapper">
            <summary>
            Takes a <see cref="!:Pinpad.Sdk.EmvTable.Entry.AidEntry">Pinpd.Sdk AidEntry</see> into a legacy representation of Aid and vice versa, based on users need.
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.Mapper.AidMapper.MapToLegacyAid(Pinpad.Sdk.Model.PinpadAid)">
            <summary>
            Translates a <see cref="!:Pinpad.Sdk.EmvTable.Entry.AidEntry">Pinpd.Sdk AidEntry</see> into legacy representation of Aid.
            </summary>
            <param name="aid">Aid entry.</param>
            <returns>Legacy representation of Aid.</returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.Mapper.AidMapper.MapToAidEntry(Pinpad.Core.Tables.EmvAidTable)">
            <summary>
            Translates a legacy instance of Aid to a <see cref="!:Pinpad.Sdk.EmvTable.Entry.AidEntry">Pinpd.Sdk AidEntry</see>.
            </summary>
            <param name="aid">Legacy representation of Aid.</param>
            <returns>Actual Aid.</returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.Mapper.AidMapper.MapPinpadContactlessMode(Pinpad.Sdk.Model.TypeCode.PinpadContactlessMode)">
            <summary>
            Translates PinpadContactlessMode into LegacyContactlessMode (Pinpad.Core ContactlessMode).
            </summary>
            <param name="mode">String representing the enum <see cref="!:Pinpad.Core.Enums.ContactlessMode">ContactlessMode</see>.</param>
            <returns>Enumerator value corresponding to the string received as parameter.</returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.Mapper.AidMapper.MapLegacyContactlessMode(Pinpad.Core.TypeCode.ContactlessMode)">
            <summary>
            Translates LegacyContactlessMode (Pinpad.Code ContactlessMode) into PinpadContactlessMode.
            </summary>
            <param name="mode">Enumerator value.</param>
            <returns>String corresponding to the enum received as parameter.</returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.Mapper.AidMapper.Validate(Pinpad.Sdk.Model.PinpadAid)">
            <summary>
            Validates mandatory AID information.
            </summary>
            <param name="aid">AID information.</param>
        </member>
        <member name="T:Pinpad.Sdk.EmvTable.Mapper.CapkMapper">
            <summary>
            Takes a <see cref="!:Pinpad.Sdk.EmvTable.Entry.CapkEntry">Pinpd.Sdk CapkEntry</see> into a legacy representation of Capk and vice versa, based on users need.
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.Mapper.CapkMapper.MapToLegacyCapk(Pinpad.Sdk.Model.PinpadCapk)">
            <summary>
            Translates a <see cref="!:Pinpad.Sdk.EmvTable.Entry.CapkEntry">CapkEntry</see> into a <see cref="!:Pinpad.Core.Controllers.Tables.CapkTable">legacy instance of CapkEntry</see>.
            </summary>
            <param name="capk"><see cref="!:Pinpad.Sdk.EmvTable.Entry.CapkEntry">CapkEntry</see> instance.</param>
            <returns>A <see cref="!:Pinpad.Core.Controllers.Tables.CapkTable">legacy instance of CapkEntry</see>.</returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.Mapper.CapkMapper.MapToPinpadCapk(Pinpad.Core.Tables.CapkTable)">
            <summary>
            Translates a <see cref="!:Pinpad.Core.Controllers.Tables.CapkTable">legacy instance of CapkEntry</see> into a <see cref="!:Pinpad.Sdk.EmvTable.Entry.CapkEntry">CapkEntry</see>.
            </summary>
            <param name="capk">A <see cref="!:Pinpad.Core.Controllers.Tables.CapkTable">legacy instance of CapkEntry</see>.</param>
            <returns>An actual <see cref="!:Pinpad.Sdk.EmvTable.Entry.CapkEntry">CapkEntry</see> instance.</returns>
        </member>
        <member name="F:Pinpad.Sdk.EmvTable.PinpadFacade.PinpadConnection">
            <summary>
            Controller for Stone Connection adapter.
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.PinpadFacade.#ctor(MicroPos.CrossPlatform.IPinpadConnection)">
            <summary>
            Creates all pinpad adapters.
            </summary>
            <param name="pinpadConnection">Pinpad connection.</param>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadFacade.Communication">
            <summary>
            Gets the default Communication adapter.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadFacade.Keyboard">
            <summary>
            Gets the default Keyboard adapter.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadFacade.Display">
            <summary>
            Gets the default Display adapter
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadFacade.Printer">
            <summary>
            Gets the default Printer adapter
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadFacade.Storage">
            <summary>
            Gets the default Storage adapter
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadFacade.Table">
            <summary>
            Gets the default Table adapter
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadFacade.Infos">
            <summary>
            Gets the default Infos adapter
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadFacade.Encryption">
            <summary>
            Controller for Stone Secure Command.
            </summary>
        </member>
        <member name="T:Pinpad.Sdk.EmvTable.PinpadTable">
            <summary>
            PinpadTable manager. PinpadTable is responsible for all operations related to table (CAPK and AID tables) controlling.
            </summary>
        </member>
        <member name="T:Pinpad.Sdk.EmvTable.IPinpadTable">
            <summary>
            Is responsible for all operations related to table (CAPK and AID tables) controlling.
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.IPinpadTable.AddEntry(Pinpad.Sdk.Model.BaseTableEntry)">
            <summary>
            Adds one entry, CAPK or AID, into it respective collection.
            </summary>
            <param name="entry">Entry: could be a <see cref="!:Pinpad.Sdk.EmvTable.Entry.CapkEntry">CAPK</see> or <see cref="!:Pinpad.Sdk.EmvTable.Entry.AidEntry">AID</see> entry.</param>
            <exception cref="T:System.NotImplementedException">Thrown if the parameter is valid, but not recognized.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Pinpad.Sdk.EmvTable.IPinpadTable.UpdatePinpad(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Pinpad.Sdk.EmvTable.IPinpadTable.RefreshFromPinpad" -->
        <!-- Badly formed XML comment ignored for member "M:Pinpad.Sdk.EmvTable.IPinpadTable.Clear" -->
        <member name="M:Pinpad.Sdk.EmvTable.IPinpadTable.IsPinpadUpdated">
            <summary>
            Verify if pinpad has tables.
            </summary>
            <returns>True if pinpad has any table, and false otherwise.</returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.IPinpadTable.GetEmvTableVersion">
            <summary>
            Actual version of the EMV table.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.IPinpadTable.CapkTable">
            <summary>
            Actual Capk collection, containing all capk added to the capk table.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.IPinpadTable.AidTable">
            <summary>
            Actual Aid collection, containing all aid added to the aid table.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.EmvTable.PinpadTable.communication">
            <summary>
            Pinpad facade with all pinpad functionalities.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.EmvTable.PinpadTable.pinpadConnection">
            <summary>
            Pinpad facade with all pinpad functionalities.
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.#ctor(Pinpad.Sdk.Connection.BasePinpadConnection)">
            <summary>
            Constructor, sets all mandatory data. 
            </summary>
            <param name="pinpadConnection">Physical environment in which the application will communicate with the pinpad (for example, serial port, bluetooth, usb, etc).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if pinpadConnection is null.</exception>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.AddEntry(Pinpad.Sdk.Model.BaseTableEntry)">
            <summary>
            Adds one entry, CAPK or AID, into it respective collection.
            </summary>
            <param name="entry">Entry: could be a <see cref="!:Pinpad.Sdk.EmvTable.Entry.CapkEntry">CAPK</see> or <see cref="!:Pinpad.Sdk.EmvTable.Entry.AidEntry">AID</see> entry.</param>
            <exception cref="T:System.NotImplementedException">Thrown if the parameter is valid, but not recognized.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Pinpad.Sdk.EmvTable.PinpadTable.UpdatePinpad(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Pinpad.Sdk.EmvTable.PinpadTable.Clear" -->
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.GetEmvTableVersion">
            <summary>
            Actual version of the EMV table.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Pinpad.Sdk.EmvTable.PinpadTable.RefreshFromPinpad" -->
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.IsPinpadUpdated">
            <summary>
            Returns whether the pinpad has tables or not.
            </summary>
            <returns>False if there is not tables into the pinpad (that is, it cannot transact); and true otherwise. </returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.UpdateLegacyPinpadAidTable">
            <summary>
            Updates pinpad AID table.
            </summary>
            <returns>Whether AID table was successfuly updated or not.</returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.UpdateLegacyPinpadCapkTable">
            <summary>
            Updates pinpad CAPK table.
            </summary>
            <returns>Whether CAPK table was successfuly updated or not.</returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.LoadTables(System.String)">
            <summary>
            Loads the table buffer to the Pinpad
            </summary>
            <returns>true if successfully loaded</returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.StartLoadingTables">
            <summary>
            Noticing Pinpad that table download has began
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.LoadTableEntry(Pinpad.Core.Tables.BaseTable)">
            <summary>
            Loads one CAPK or AID entry into the Pinpad
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.FinishLoadingTables">
            <summary>
            Noticing Pinpad that table download has finished
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.AddTable(Pinpad.Core.Tables.BaseTable)">
            <summary>
            Adds a table to the buffer
            </summary>
            <param name="table">BaseTable</param>
            <returns>true if successfully added</returns>
        </member>
        <member name="M:Pinpad.Sdk.EmvTable.PinpadTable.RemoveTable(Pinpad.Core.Tables.BaseTable)">
            <summary>
            Remove a table from Pinpad
            </summary>
            <param name="table">The table to be removed.</param>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadTable.CapkTable">
            <summary>
            Capk collection, containing all capk added to the capk table.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadTable.AidTable">
            <summary>
            Aid collection, containing all aid added to the aid table.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadTable.ExpectedTableVersion">
            <summary>
            Expected TableVersion in the Pinpad, used to load tables and verify tables at the Pinpad
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadTable._expectedTableVersion">
            <summary>
            Expected TableVersion in the Pinpad, used to load tables and verify tables at the Pinpad
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadTable._tableCollection">
            <summary>
            Table collection containing pinpad AID and CAPK entries.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadTable._tableCollectionModified">
            <summary>
            MEDIFIED table collection containing pinpad AID and CAPK entries.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.EmvTable.PinpadTable.TableCollection">
            <summary>
            Gets the tables currently in the buffer
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.Connection.BasePinpadConnection.Open(System.String)">
            <summary>
            Try connect to pinpad in the specified serial port.
            </summary>
            <param name="portName">The serial port name.</param>
            <exception cref="T:System.IO.IOException">The port is in an invalid state. - or - An attempt to set the state of the underlying port failed. For example, the parameters passed from this System.IO.Ports.SerialPort object were invalid.</exception>
        </member>
        <member name="M:Pinpad.Sdk.Connection.BasePinpadConnection.Close(System.String)">
            <summary>
            Disconnect from the attached serial port.
            </summary>
            <param name="portName">The serial port name.</param>
        </member>
        <member name="M:Pinpad.Sdk.Connection.BasePinpadConnection.Ping">
            <summary>
            Sends a symbolic stream of bytes, to verify if the connection is OK.
            </summary>
            <returns>Whether the connection is alive or not.</returns>
        </member>
        <member name="P:Pinpad.Sdk.Connection.BasePinpadConnection.IsOpen">
            <summary>
            Whether the connection is opened or not.
            This property determines wheter something can be sent to the device or not. Should be verified after every attempting to send data to the pinpad.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.Connection.BasePinpadConnection.PlatformPinpadConnection">
            <summary>
            Legacy Pinpad.Core pinpad connection.
            </summary>
        </member>
        <member name="T:Pinpad.Sdk.Mapper.CardMapper">
            <summary>
            Translates information about card used on transaction.
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.Mapper.CardMapper.MapCardFromTracks(Pinpad.Core.Commands.GcrResponse)">
            <summary>
            Takes a GCR Response from Pinpad and translates it into Card information.
            </summary>
            <param name="rawResponse">GCR original response from Pinpad.</param>
            <returns>CardEntry containing basic information about the card.</returns>
        </member>
        <member name="M:Pinpad.Sdk.Mapper.CardMapper.MapCardType(Pinpad.Core.TypeCode.ApplicationType)">
            <summary>
            Translates ApplicationType from a GCR original (raw) response into CardType.
            </summary>
            <param name="appType">ApplicationType get from Pinpad GCR response.</param>
            <returns>Type of the card.</returns>
        </member>
        <member name="M:Pinpad.Sdk.Mapper.EmvTrackMapper.GetBrandByAid(System.String)">
            <summary>
            Get brand name by Application ID.
            </summary>
            <param name="aid">Application ID.</param>
            <returns>Brand name</returns>
        </member>
        <member name="F:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.TRACK1_FIELD_SEPARATOR">
            <summary>
            Track1, separator between different information. Based on ISO 7810/7811.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.TRACK2_FIELD_SEPARATOR">
            <summary>
            Track2, separator between different information. Based on ISO 7810/7811.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.EXPIRATIONDATE_INDEX_ON_TRACK1">
            <summary>
            Track 1 is made of several information divided by a <see cref="F:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.TRACK1_FIELD_SEPARATOR">separator</see>. This is the index of card expiration date on track 1.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.EXPIRATIONDATE_INDEX_ON_TRACK2">
            <summary>
            Track 2 is made of several information divided by a <see cref="F:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.TRACK2_FIELD_SEPARATOR">separator</see>. This is the index of card expiration date on track 2.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.EXPIRATIONDATE_LENGTH">
            <summary>
            Card expiration date string length.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.PAN_INDEX">
            <summary>
            Track 2 is made of several information divided by a <see cref="!:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.TRACK2_SEPARATOR">separator</see>. This is the index of the Primary Account Number (PAN) on track 1.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.CARDHOLDERNAME_INDEX">
            <summary>
            Track 1 is made of several information divided by a <see cref="F:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.TRACK1_FIELD_SEPARATOR">separator</see>. This is the index of cardholder name on track 1.
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.MapCardFromTrack(Pinpad.Core.Commands.GcrResponse)">
            <summary>
            Translates card track data into information.
            </summary>
            <param name="rawResponse">Raw response from pinpad GCR command.</param>
            <returns>Card information.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when womething went wrong internally.</exception>
        </member>
        <member name="M:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.MapValidTrack(Pinpad.Core.Commands.GcrResponse)">
            <summary>
            Selects a valid track (between track 1 and 2), giving priority to Track 1.
            </summary>
            <param name="rawResponse">Raw response from pinpad GCR command.</param>
            <returns>Valid track to be read.</returns>
        </member>
        <member name="M:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.GetFieldSeparator(System.String)">
            <summary>
            Selects the corresponding separator of the selected track.
            </summary>
            <param name="track">Selected track.</param>
            <returns>Corresponding separator os the track received as parameter.</returns>
        </member>
        <member name="M:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.MapPan(System.String,System.Char)">
            <summary>
            Translates track data into a string containing PAN.
            </summary>
            <param name="track">Selected track.</param>
            <param name="separator">Corresponding track separator.</param>
            <returns>Primary Account Number (PAN).</returns>
        </member>
        <member name="M:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.MapCardholderName(System.String,System.Char)">
            <summary>
            Translates track data into a string containing cardholder name.
            </summary>
            <param name="track">Selected track.</param>
            <param name="separator">Corresponsing track separator.</param>
            <returns>Cardholder name.</returns>
        </member>
        <member name="M:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.MapExpirationDate(System.String,System.Char)">
            <summary>
            Translates track data into a string containing card expiration date.
            </summary>
            <param name="track">Selected track.</param>
            <param name="separator">Corresponding track separator.</param>
            <returns>Card expiration date.</returns>
        </member>
        <member name="M:Pinpad.Sdk.Mapper.MagneticStripeTrackMapper.GetBrandByPan(System.String)">
            <summary>
            Get brand name by primary account number first 4 digits.
            </summary>
            <returns>Brand name.</returns>
        </member>
        <member name="T:Pinpad.Sdk.Connection.PinpadConnection">
            <summary>
            Responsible for manage a Pinpad connection.
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.Connection.PinpadConnection.SearchPinpadPort">
            <summary>
            Search in all available serial ports for a pinpad connection.
            </summary>
            <returns>The serial port name of pinpad if found, or null otherwise</returns>
        </member>
        <member name="M:Pinpad.Sdk.Connection.PinpadConnection.Open(System.String)">
            <summary>
            Try connect to pinpad in the specified serial port.
            </summary>
            <param name="portName">The serial port name.</param>
            <exception cref="T:System.IO.IOException">The port is in an invalid state. - or - An attempt to set the state of the underlying port failed. For example, the parameters passed from this System.IO.Ports.SerialPort object were invalid.</exception>
        </member>
        <member name="M:Pinpad.Sdk.Connection.PinpadConnection.Close(System.String)">
            <summary>
            Disconnect from the attached serial port.
            </summary>
            <param name="portName">The serial port name.</param>
        </member>
        <member name="M:Pinpad.Sdk.Connection.PinpadConnection.Ping">
            <summary>
            Sends a symbolic stream of bytes, to verify if the connection is OK.
            </summary>
            <returns>Whether the connection is alive or not.</returns>
        </member>
        <member name="P:Pinpad.Sdk.Connection.PinpadConnection.IsOpen">
            <summary>
            Whether the connection is opened or not.
            This property determines wheter something can be sent to the device or not. Should be verified after every attempting to send data to the pinpad.
            </summary>
        </member>
        <member name="T:Pinpad.Sdk.PinpadController">
            <summary>
            Pinpad controller, containing all methods needed to perform a transaction.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.PinpadController.pinpadFacade">
            <summary>
            Facade through which pinpad communication is made.
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.PinpadController.#ctor(Pinpad.Sdk.Connection.BasePinpadConnection)">
            <summary>
            Primary constructor.
            </summary>
            <param name="pinpadConnection">Connection through which the pinpad will be looked for.</param>
        </member>
        <member name="M:Pinpad.Sdk.PinpadController.#ctor(Pinpad.Sdk.Connection.BasePinpadConnection,Pinpad.Sdk.EmvTable.IPinpadTable)">
            <summary>
            Alternative constructor, setter of all mandatory parameters and responsible for data validation.
            </summary>
            <param name="pinpadConnection">Connection through which the pinpad will be looked for.</param>
            <param name="pinpadDisplay">Display handler.</param>
            <param name="pinpadTable">Pinpad emv table handler.</param>
        </member>
        <member name="M:Pinpad.Sdk.PinpadController.RemoveCard(System.String,Pinpad.Sdk.Model.TypeCode.DisplayPaddingType)">
            <summary>
            On Pinpad screen, alternates between "RETIRE O CARTÃO" and parameter 'message' received, until card removal.
            </summary>
            <param name="message">Message to be shown on pinpad screen. Must not exceed 16 characters. This message remains on Pinpad screen after card removal.</param>
            <param name="padding">Message alignment.</param>
            <returns></returns>
        </member>
        <member name="M:Pinpad.Sdk.PinpadController.ReadCard(Pinpad.Sdk.Model.TypeCode.TransactionType,System.Decimal)">
            <summary>
            Read basic card information, that is, brand id, card type, card primary account number (PAN), cardholder name and expiration date.
            </summary>
            <param name="transactionType">Transaction type, that is, debit/credit.</param>
            <returns>Card basic info.</returns>
        </member>
        <member name="M:Pinpad.Sdk.PinpadController.ReadPassword(System.Decimal,System.String,Pinpad.Sdk.Model.TypeCode.CardType)">
            <summary>
            If cardholder card needs password, than prompts it. Otherwise, nothing is done. 
            </summary>
            <param name="amount">Transaction amount in cents.</param>
            <param name="pan">Primary Account Number (PAN).</param>
            <param name="readingMode">Card type, defining how the card must be read.</param>
            <returns>An object Pin, containing pin block (cardholder password), Key Serial Number (KSN, determining pin block DUKPT encryption key) and if pin verification is online. </returns>
        </member>
        <member name="M:Pinpad.Sdk.PinpadController.Validate(Pinpad.Sdk.Connection.BasePinpadConnection,Pinpad.Sdk.Model.IPinpadDisplay,Pinpad.Sdk.EmvTable.IPinpadTable)">
            <summary>
            Responsible for validating mandatory parameters.
            </summary>
            <param name="pinpadConnection">Connection through which the pinpad will be looked for.</param>
            <param name="pinpadDisplay">Display handler.</param>
            <param name="pinpadTable">Pinpad emv table handler.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a parameter is null (specifies which is).</exception>
        </member>
        <member name="P:Pinpad.Sdk.PinpadController.PinpadConnection">
            <summary>
            Connection handler, is responsible for specifying the connection through which the pinpad will be looked for.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.PinpadController.Display">
            <summary>
            Display handler, responsible for presenting messages in a pinpad device.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.PinpadController.Keyboard">
            <summary>
            Keyboard handler, responsible for getting inputs from pinpad keyboard.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.PinpadController.Infos">
            <summary>
            Information about the pinpad device connected.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.PinpadController.EmvTable">
            <summary>
            Pinpad Emv table handler, that is, responsible for all operations related to table (CAPK and AID tables) controlling.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.PinpadController.LastCommandStatus">
            <summary>
            Last status returned from a pinpad command.
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.Transaction.EmvPinReader.SendGoc(Pinpad.Sdk.EmvTable.IPinpadFacade,System.Decimal)">
            <summary>
            Sends reading command using ABECS when card have a chip.
            </summary>
            <param name="amount">Transaction amount.</param>
            <returns>ABECS GOC command response.</returns>
        </member>
        <member name="M:Pinpad.Sdk.Transaction.EmvPinReader.Validate(System.Decimal)">
            <summary>
            Validates parameter used on internal processing.
            </summary>
            <exception cref="T:System.ArgumentNullException">When one parameter is null.</exception>
            <exception cref="T:System.ArgumentException">When one parameter is not null, but contains invalid data.</exception>
        </member>
        <member name="M:Pinpad.Sdk.Transaction.MagneticStripePinReader.Read(Pinpad.Sdk.EmvTable.IPinpadFacade,System.String,System.Decimal,Pinpad.Sdk.Model.Pin@)">
            <summary>
            Read security information when card has no chip - magnetic stripe only.
            </summary>
            <param name="pan">Primary Account Number printed on the card.</param>
            <param name="amount">Transaction amount.</param>
            <returns>Wheter is an online transaction or not.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when parameter validation fails.</exception>
        </member>
        <member name="M:Pinpad.Sdk.Transaction.MagneticStripePinReader.SendGpn(Pinpad.Sdk.EmvTable.IPinpadFacade,System.String,System.Decimal)">
            <summary>
            Sends reading command using ABECS in case of a magnetic stripe card.
            Unexpected behavior if amount is too large (over quadrillion).
            </summary>
            <param name="pan">Primary Account Number printed on the card.</param>
            <param name="amount">Transaction amount.</param>
            <returns>ABECS GPN command response.</returns>
        </member>
        <member name="M:Pinpad.Sdk.Transaction.MagneticStripePinReader.GetAmountLabel(System.Decimal)">
            <summary>
            Responsible for returning a formatted string to be shown on the pinpad screen when the cardholder should input his password.
            If the formatted string is too large so it overtake pinpad linewidth, then returns only the transaction amount.
            This method DOES NOT treat this situation: if the amount itself overtakes pinpads linewidth. (behavior unexpected)
            </summary>
            <param name="amount">Transaction amount, on decimal format.</param>
            <returns>Formatted string to be shown on pinpad screen when the cardholder should input his password.</returns>
        </member>
        <member name="M:Pinpad.Sdk.Transaction.MagneticStripePinReader.Validate(System.Decimal,System.String)">
            <summary>
            Validates parameters used on internal processing.
            </summary>
            <exception cref="T:System.ArgumentNullException">When one parameter is null.</exception>
            <exception cref="T:System.ArgumentException">When one parameter is not null, but contains invalid data.</exception>
        </member>
        <member name="T:Pinpad.Sdk.Transaction.PinReader">
            <summary>
            Responsible for getting pinpad security information (Pin Block and Key Serial Number(KSN)).
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.Transaction.PinReader.STONE_DUKPT_KEY_INDEX">
            <summary>
            MK index or DUKPT register.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.Transaction.PinReader.PASSWORD_MINIMUM_LENGTH">
            <summary>
            Cardholder password minimum length.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.Transaction.PinReader.PASSWORD_MAXIMUM_LENGTH">
            <summary>
            Cardholder maximum length.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.Transaction.PinReader.pinpadFacade">
            <summary>
            Facade through which pinpad communication is made.
            </summary>
        </member>
        <member name="F:Pinpad.Sdk.Transaction.PinReader.readingMode">
            <summary>
            Defines how data is read, according to card type.
            </summary>
        </member>
        <member name="M:Pinpad.Sdk.Transaction.PinReader.#ctor(Pinpad.Sdk.EmvTable.IPinpadFacade,Pinpad.Sdk.Model.TypeCode.CardType)">
            <summary>
            Reads pinblock and ksn and sets it's value into this class property. 
            Is up to the user using these infos.
            </summary>
            <param name="pinpadFacade">PinpadFacade mandatory to this class be able to communicate with the pinpad.</param>
            <param name="readingMode">Card type, that is, the method physical in which the card should be read.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when one parameter validation fails.</exception>
        </member>
        <member name="M:Pinpad.Sdk.Transaction.PinReader.Read(System.Decimal,System.String)">
            <summary>
            Reads Pin Block and Key Serial Number (KSN) from the card.
            If needed, prompts for cardholder password.
            </summary>
            <param name="pan">Primary Account Number, printed on the card.</param>
            <param name="amount">Transaction amount.</param>
            <returns>Whether is an online transaction or not.</returns>
            <exception cref="T:System.NotImplementedException">Thrown when a reading mode is unknown.</exception>
        </member>
        <member name="M:Pinpad.Sdk.Transaction.PinReader.Validate(Pinpad.Sdk.EmvTable.IPinpadFacade,Pinpad.Sdk.Model.TypeCode.CardType)">
            <summary>
            Validates parameters sent to the constructor.
            </summary>
            <exception cref="T:System.ArgumentNullException">When one parameter is null.</exception>
            <exception cref="T:System.ArgumentException">When one parameter is not null, but contains invalid data.</exception>
        </member>
        <member name="P:Pinpad.Sdk.Transaction.PinReader.CommandStatus">
            <summary>
            Pinpad command response status.
            </summary>
        </member>
        <member name="P:Pinpad.Sdk.Transaction.PinReader.EmvData">
            <summary>
            EMV data, if card has chip.
            </summary>
        </member>
    </members>
</doc>
